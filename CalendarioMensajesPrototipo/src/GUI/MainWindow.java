
package GUI;

import java.util.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author magdi
 */
public class MainWindow extends javax.swing.JFrame {

 
    public MainWindow() {
        initComponents();
        
        
    }
    
    class Paciente {
        private String afiliacion;
        private String nombre;
        private String edad;
        private String estudio;
        private String citaIGSS;
        private String telefono;
        private String fechaSPS;
        private String citaAurora;
        private String hora;

        public Paciente(String afiliacion, String nombre, String edad, String estudio, 
                        String citaIGSS, String telefono, String fechaSPS, String citaAurora, String hora) {
            this.afiliacion = afiliacion;
            this.nombre = nombre;
            this.edad = edad;
            this.estudio = estudio;
            this.citaIGSS = citaIGSS;
            this.telefono = telefono;
            this.fechaSPS = fechaSPS;
            this.citaAurora = citaAurora;
            this.hora = hora;
        }

        // Getters
        public String getAfiliacion() { return afiliacion; }
        public String getNombre() { return nombre; }
        public String getEdad() { return edad; }
        public String getEstudio() { return estudio; }
        public String getCitaIGSS() { return citaIGSS; }
        public String getTelefono() { return telefono; }
        public String getFechaSPS() { return fechaSPS; }
        public String getCitaAurora() { return citaAurora; }
        public String getHora() { return hora; }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_choose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_datos = new javax.swing.JTable();
        btn_crearMensajes = new javax.swing.JButton();
        btn_createCalendar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cargar Archivo CSV Pacientes");

        btn_choose.setText("Escoger Archivo");
        btn_choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_chooseActionPerformed(evt);
            }
        });

        tbl_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_datos);

        btn_crearMensajes.setText("Crear Mensajes");
        btn_crearMensajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_crearMensajesActionPerformed(evt);
            }
        });

        btn_createCalendar.setText("Crear Calendario");
        btn_createCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_createCalendarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(btn_crearMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(126, 126, 126)
                                .addComponent(btn_createCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(113, 113, 113)
                                .addComponent(btn_choose))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btn_choose))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_crearMensajes)
                    .addComponent(btn_createCalendar))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_chooseActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar Archivo CSV");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos CSV (*.csv)", "csv"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            cargarDatosDesdeCSV(selectedFile);
        }
    }//GEN-LAST:event_btn_chooseActionPerformed

    private final List<Paciente> listaPacientes = new ArrayList<>();

    private void cargarDatosDesdeCSV(File file) {
        listaPacientes.clear();
        DefaultTableModel model = (DefaultTableModel) tbl_datos.getModel();
        model.setRowCount(0);

        // Definir las columnas de la tabla
        model.setColumnIdentifiers(new Object[]{
            "AFILIACION", "NOMBRE DE PACIENTE", "EDAD", "ESTUDIO", 
            "CITA IGSS", "No. TEL.", "FECHA SPS", "CITA AURORA", "HORA"
        });

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            // Saltar la primera línea (encabezados)
            br.readLine();

            while ((line = br.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 9) {
                    // Crear un nuevo paciente
                    Paciente paciente = new Paciente(
                        datos[0], // AFILIACION
                        datos[1], // NOMBRE DE PACIENTE
                        datos[2], // EDAD
                        datos[3], // ESTUDIO
                        datos[4], // CITA IGSS
                        datos[5], // No. TEL.
                        datos[6], // FECHA SPS
                        datos[7], // CITA AURORA
                        datos[8]  // HORA
                    );

                    // Añadir paciente a la lista
                    listaPacientes.add(paciente);

                    // Añadir datos a la tabla
                    model.addRow(datos);
                }
            }

            JOptionPane.showMessageDialog(this, "Datos cargados correctamente: " + 
                                         listaPacientes.size() + " registros encontrados.", 
                                         "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + e.getMessage(), 
                                         "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btn_crearMensajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_crearMensajesActionPerformed
        // TODO add your handling code here:
        if (listaPacientes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay datos para generar los mensajes. Cargue un archivo CSV primero.", 
                                         "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar Archivo de Mensajes");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto (*.txt)", "txt"));

        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Asegurarse que el archivo tenga extensión .txt
            if (!file.getName().toLowerCase().endsWith(".txt")) {
                file = new File(file.getAbsolutePath() + ".txt");
            }

            crearMensajesPredeterminados(file);
        }
    }//GEN-LAST:event_btn_crearMensajesActionPerformed

    private void crearMensajesPredeterminados(File file) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (Paciente paciente : listaPacientes) {
                bw.write("Número: " + paciente.getTelefono());
                bw.newLine();

                // Mensaje según el tipo de estudio
                if ("EEG".equalsIgnoreCase(paciente.getEstudio())) {
                    bw.write("Porfavor presentarse a la dirección de la clínica que su fecha esta confirmada para la " +
                             paciente.getCitaAurora() + " a la hora " + paciente.getHora() + 
                             " por favor traer el cabello limpio y no mojado");
                } else if ("MSB".equalsIgnoreCase(paciente.getEstudio())) {
                    bw.write("Porfavor presentarse a la dirección de la clínica que su fecha esta confirmada para la " +
                             paciente.getCitaAurora() + " a la hora " + paciente.getHora() + 
                             " Traer una playera o blusa sin mangas o con mangas flojas y no aplicarse perfume en los brazos.");
                } else {
                    // Por si hay otros tipos de estudios, mensaje genérico
                    bw.write("Porfavor presentarse a la dirección de la clínica que su fecha esta confirmada para la " +
                             paciente.getCitaAurora() + " a la hora " + paciente.getHora() + 
                             " para su estudio de " + paciente.getEstudio());
                }

                bw.newLine();
                bw.newLine(); // Doble salto de línea para separar mensajes
            }

            JOptionPane.showMessageDialog(this, "Archivo de mensajes predeterminados creado correctamente.", 
                                         "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al crear el archivo: " + e.getMessage(), 
                                         "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btn_createCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_createCalendarActionPerformed
        // TODO add your handling code here:
        if (listaPacientes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay datos para generar el calendario. Cargue un archivo CSV primero.", 
                                         "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar CSV para Google Calendar");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos CSV (*.csv)", "csv"));

        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Asegurarse que el archivo tenga extensión .csv
            if (!file.getName().toLowerCase().endsWith(".csv")) {
                file = new File(file.getAbsolutePath() + ".csv");
            }

            try {
                crearCSVCalendar(file);
            } catch (ParseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_createCalendarActionPerformed

    private void crearCSVCalendar(File file) throws ParseException {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            // Escribir encabezados
            bw.write("Subject,Start Date,Start Time,End Date,End Time,All Day Event,Description,Location,Private");
            bw.newLine();

            SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm");

            for (Paciente paciente : listaPacientes) {
                StringBuilder sb = new StringBuilder();

                // Subject: ESTUDIO
                sb.append(paciente.getEstudio()).append(",");

                // Start Date: CITA AURORA
                sb.append(paciente.getCitaAurora()).append(",");

                // Start Time: HORA
                sb.append(paciente.getHora()).append(",");

                // End Date: el mismo día CITA AURORA
                sb.append(paciente.getCitaAurora()).append(",");

                // End Time: sumale una hora a Start Time
                try {
                    Date horaInicio = formatoHora.parse(paciente.getHora());
                    Date horaFin = new Date(horaInicio.getTime() + 3600000); // Añadir 1 hora (3600000 ms)
                    sb.append(formatoHora.format(horaFin)).append(",");
                } catch (ParseException e) {
                    // Si hay un error con el formato de hora, simplemente añadir la hora original
                    sb.append(paciente.getHora()).append(",");
                }

                // All Day: False
                sb.append("FALSE,");

                // Description: NOMBRE DE PACIENTE, ESTUDIO, EDAD
                sb.append("\"").append(paciente.getNombre()).append(", ")
                  .append(paciente.getEstudio()).append(", ")
                  .append(paciente.getEdad()).append("\",");

                // Location: Clinica
                sb.append("Clinica,");

                // Private: False
                sb.append("FALSE");

                bw.write(sb.toString());
                bw.newLine();
            }

            JOptionPane.showMessageDialog(this, "Archivo CSV para Google Calendar creado correctamente.", 
                                         "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al crear el archivo: " + e.getMessage(), 
                                         "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_choose;
    private javax.swing.JButton btn_crearMensajes;
    private javax.swing.JButton btn_createCalendar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_datos;
    // End of variables declaration//GEN-END:variables
}
